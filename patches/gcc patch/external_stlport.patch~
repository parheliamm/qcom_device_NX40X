From ef87dda210ba1fb8196a6743040e5f73a5af1a53 Mon Sep 17 00:00:00 2001
From: Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>
Date: Thu, 16 Feb 2012 06:55:55 +0059
Subject: [PATCH] Various fixes from linaro.

stlport: Force building PIC code

Required for gcc 4.7

Signed-off-by: Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>

stlport: Don't force use of the prebuilt compiler

Using the prebuilt compiler doesn't make sense and actually breaks
the build with gcc 4.7. (This should provide a little speedup on
4.6 builds as well)

Signed-off-by: Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>

stlport: Fix strict aliasing violations

This patch fixes strict aliasing violations.
Forward-ported from Chao Yang <chao.yang@linaro.org>'s
patch for 2.3.5.

Signed-off-by: Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>

stlport: Fix incompatibility with clang++ (used by llvm) in ISO C++11 mode

clang++ has a strange idea about wchar_t

Change-Id: I9f73e88cc06c35e988b33576ea235046ea51d546
Signed-off-by: Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>
---
 Android.mk                    |   20 ++++++++++----------
 stlport/stl/_limits.h         |    2 +-
 stlport/stl/_stdexcept_base.c |   14 ++++++++++----
 3 files changed, 21 insertions(+), 15 deletions(-)

diff --git a/Android.mk b/Android.mk
index 049a2ab..f6c00a8 100755
--- a/Android.mk
+++ b/Android.mk
@@ -34,8 +34,8 @@ libstlport_src_files := \
 	src/c_locale.c \
 	src/cxa.c \
 
-libstlport_cflags := -D_GNU_SOURCE
-libstlport_cppflags := -fuse-cxa-atexit
+libstlport_cflags := -D_GNU_SOURCE -fPIC
+libstlport_cppflags := -fuse-cxa-atexit -fPIC
 
 ##########################################
 include $(CLEAR_VARS)
@@ -52,10 +52,10 @@ LOCAL_MODULE := libstlport
 LOCAL_CFLAGS := $(libstlport_cflags)
 LOCAL_CPPFLAGS := $(libstlport_cppflags)
 
-ifneq ($(TARGET_ARCH),x86)
-LOCAL_NDK_VERSION := 4
-LOCAL_SDK_VERSION := 8
-endif
+#ifneq ($(TARGET_ARCH),x86)
+#LOCAL_NDK_VERSION := 4
+#LOCAL_SDK_VERSION := 8
+#endif
 
 include $(LOCAL_PATH)/libstlport.mk
 include $(BUILD_SHARED_LIBRARY)
@@ -70,10 +70,10 @@ LOCAL_MODULE := libstlport_static
 LOCAL_CFLAGS := $(libstlport_cflags)
 LOCAL_CPPFLAGS := $(libstlport_cppflags)
 
-ifneq ($(TARGET_ARCH),x86)
-LOCAL_NDK_VERSION := 4
-LOCAL_SDK_VERSION := 8
-endif
+#ifneq ($(TARGET_ARCH),x86)
+#LOCAL_NDK_VERSION := 4
+#LOCAL_SDK_VERSION := 8
+#endif
 
 include $(LOCAL_PATH)/libstlport.mk
 include $(BUILD_STATIC_LIBRARY)
diff --git a/stlport/stl/_limits.h b/stlport/stl/_limits.h
index c0091f6..349211a 100644
--- a/stlport/stl/_limits.h
+++ b/stlport/stl/_limits.h
@@ -210,7 +210,7 @@ class numeric_limits<unsigned char>
   : public _STLP_PRIV _Integer_limits<unsigned char, 0, UCHAR_MAX, -1, true>
 {};
 
-#if !(defined (_STLP_NO_WCHAR_T) || defined (_STLP_WCHAR_T_IS_USHORT))
+#if !(defined (_STLP_NO_WCHAR_T) || defined (_STLP_WCHAR_T_IS_USHORT)) && !defined(__clang__)
 
 _STLP_TEMPLATE_NULL
 class numeric_limits<wchar_t>
diff --git a/stlport/stl/_stdexcept_base.c b/stlport/stl/_stdexcept_base.c
index deb7056..e17b799 100644
--- a/stlport/stl/_stdexcept_base.c
+++ b/stlport/stl/_stdexcept_base.c
@@ -16,6 +16,12 @@
  *
  */
 
+static inline size_t* local_cast(void* p){
+  union{void* p; size_t* size_t_p;}u_cast;
+  u_cast.p = p;
+  return u_cast.size_t_p;
+}
+
 __Named_exception::__Named_exception(const string& __str) {
   size_t __size = strlen(_STLP_PRIV __get_c_string(__str)) + 1;
   if (__size > _S_bufsize) {
@@ -25,7 +31,7 @@ __Named_exception::__Named_exception(const string& __str) {
       _M_name = _M_static_name;
     }
     else {
-      *(__REINTERPRET_CAST(size_t*, &_M_static_name[0])) = __size * sizeof(char);
+      *(local_cast(&_M_static_name[0])) = __size * sizeof(char);
     }
   }
   else {
@@ -48,7 +54,7 @@ __Named_exception::__Named_exception(const __Named_exception& __x) {
       _M_name = _M_static_name;
     }
     else {
-      *(__REINTERPRET_CAST(size_t*, &_M_static_name[0])) = __size * sizeof(char);
+      *(local_cast(&_M_static_name[0])) = __size * sizeof(char);
     }
   }
   else {
@@ -64,7 +70,7 @@ __Named_exception::__Named_exception(const __Named_exception& __x) {
 
 __Named_exception& __Named_exception::operator = (const __Named_exception& __x) {
   size_t __size = strlen(__x._M_name) + 1;
-  size_t __buf_size = _M_name != _M_static_name ? *(__REINTERPRET_CAST(size_t*, &_M_static_name[0])) : _S_bufsize;
+  size_t __buf_size = _M_name != _M_static_name ? *(local_cast(&_M_static_name[0])) : _S_bufsize;
   if (__size > __buf_size) {
     // Being here necessarily mean that we need to allocate a buffer:
     if (_M_name != _M_static_name) free(_M_name);
@@ -74,7 +80,7 @@ __Named_exception& __Named_exception::operator = (const __Named_exception& __x)
       _M_name = _M_static_name;
     }
     else {
-      *(__REINTERPRET_CAST(size_t*, &_M_static_name[0])) = __size * sizeof(char);
+      *(local_cast(&_M_static_name[0])) = __size * sizeof(char);
     }
   }
 #if !defined (_STLP_USE_SAFE_STRING_FUNCTIONS)
-- 
1.7.9.5

